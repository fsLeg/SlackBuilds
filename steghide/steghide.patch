--- a/Makefile.in	2003-10-15 12:01:28.000000000 +0400
+++ b/Makefile.in	2014-08-13 20:46:16.000000000 +0400
@@ -161,7 +161,7 @@
 SUBDIRS = m4 intl po doc src tests
 docdir = $(prefix)/share/doc/$(PACKAGE)
 EXTRA_DIST = config.rpath mkinstalldirs  ABOUT-NLS BUGS CREDITS HISTORY LEAME depcomp
-doc_DATA = ABOUT-NLS BUGS COPYING CREDITS HISTORY INSTALL LEAME README TODO
+doc_DATA = BUGS CREDITS HISTORY LEAME README TODO
 MAINTAINERCLEANFILES = Makefile.in aclocal.m4 config.guess config.h.in \
 config.sub configure depcomp install-sh missing mkinstalldirs steghide.doxygen steghide.spec
 
--- a/src/AuData.h	2003-09-28 19:30:29.000000000 +0400
+++ b/src/AuData.h	2014-08-13 20:40:53.000000000 +0400
@@ -26,22 +26,30 @@
 
 // AuMuLawAudioData
 typedef AudioDataImpl<AuMuLaw,BYTE> AuMuLawAudioData ;
+template<>
 inline BYTE AuMuLawAudioData::readValue (BinaryIO* io) const { return (io->read8()) ; }
+template<>
 inline void AuMuLawAudioData::writeValue (BinaryIO* io, BYTE v) const { io->write8(v) ; }
 
 // AuPCM8AudioData
 typedef AudioDataImpl<AuPCM8,SBYTE> AuPCM8AudioData ;
+template<>
 inline SBYTE AuPCM8AudioData::readValue (BinaryIO* io) const { return ((SBYTE) io->read8()) ; }
+template<>
 inline void AuPCM8AudioData::writeValue (BinaryIO* io, SBYTE v) const { io->write8((BYTE) v) ; }
 
 // AuPCM16AudioData
 typedef AudioDataImpl<AuPCM16,SWORD16> AuPCM16AudioData ;
+template<>
 inline SWORD16 AuPCM16AudioData::readValue (BinaryIO* io) const { return ((SWORD16) io->read16_be()) ; }
+template<>
 inline void AuPCM16AudioData::writeValue (BinaryIO* io, SWORD16 v) const { io->write16_be((UWORD16) v) ; }
 
 // AuPCM32AudioData
 typedef AudioDataImpl<AuPCM32,SWORD32> AuPCM32AudioData ;
+template<>
 inline SWORD32 AuPCM32AudioData::readValue (BinaryIO* io) const { return ((SWORD32) io->read32_be()) ; }
+template<>
 inline void AuPCM32AudioData::writeValue (BinaryIO* io, SWORD32 v) const { io->write32_be((UWORD32) v) ; }
 
 #endif // ndef SH_AUDATA_H
--- a/src/AuSampleValues.cc	2003-09-28 19:30:30.000000000 +0400
+++ b/src/AuSampleValues.cc	2014-08-13 20:42:49.000000000 +0400
@@ -21,17 +21,25 @@
 #include "AuSampleValues.h"
 
 // AuMuLawSampleValue
+template<>
 const BYTE AuMuLawSampleValue::MinValue = 0 ;
+template<>
 const BYTE AuMuLawSampleValue::MaxValue = BYTE_MAX ;
 
 // AuPCM8SampleValue
+template<>
 const SBYTE AuPCM8SampleValue::MinValue = SBYTE_MIN ;
+template<>
 const SBYTE AuPCM8SampleValue::MaxValue = SBYTE_MAX ;
 
 // AuPCM16SampleValue
+template<>
 const SWORD16 AuPCM16SampleValue::MinValue = SWORD16_MIN ;
+template<>
 const SWORD16 AuPCM16SampleValue::MaxValue = SWORD16_MAX ;
 
 // AuPCM32SampleValue
+template<>
 const SWORD32 AuPCM32SampleValue::MinValue = SWORD32_MIN ;
+template<>
 const SWORD32 AuPCM32SampleValue::MaxValue = SWORD32_MAX ;
--- a/src/BmpFile.cc	2003-09-28 19:30:30.000000000 +0400
+++ b/src/BmpFile.cc	2014-08-13 20:46:21.000000000 +0400
@@ -214,10 +214,10 @@
 		// create reservoir - for every i reservoir[i] contains the sample values that are neighbourss of
 		// the sample value with label i and have a lower label (and have already been found)
 		// This is necessary to use collapsing trees together with bucket sort (without huge increase in memory usage)
-		std::vector<BmpRGBSampleValue*> reservoir[svs.size()] ;
+		std::vector<std::vector<BmpRGBSampleValue*> > reservoir(svs.size()) ;
 
 		// neighbours sorted by distance (for the current source sample value)
-		std::vector<BmpRGBSampleValue*> neighbours_byd[r + 1] ;
+		std::vector<std::vector<BmpRGBSampleValue*> > neighbours_byd(r + 1) ;
 
 		for (std::vector<SampleValue*>::const_iterator srcsvit = svs.begin() ; srcsvit != svs.end() ; srcsvit++) {
 			BmpRGBSampleValue* srcsv = (BmpRGBSampleValue*) (*srcsvit) ;
--- a/src/Graph.h	2003-09-28 19:30:30.000000000 +0400
+++ b/src/Graph.h	2014-08-13 20:47:45.000000000 +0400
@@ -21,6 +21,8 @@
 #ifndef SH_GRAPH_H
 #define SH_GRAPH_H
 
+#define ULONG_MAX 4294967295
+
 #include <iostream>
 #include <list>
 #include <map>
--- a/src/MHashKeyGen.h	2003-09-28 19:30:30.000000000 +0400
+++ b/src/MHashKeyGen.h	2014-08-13 20:46:21.000000000 +0400
@@ -23,6 +23,7 @@
 
 #include <vector>
 
+#define _Bool bool
 #include <mhash.h>
 
 class MHashKeyGen {
--- a/src/MHashPP.cc	2003-10-05 14:17:50.000000000 +0400
+++ b/src/MHashPP.cc	2014-08-13 20:46:21.000000000 +0400
@@ -21,6 +21,7 @@
 #include <cstdlib>
 #include <string>
 
+#define _Bool bool
 #include <mhash.h>
 
 #include "BitString.h"
@@ -120,7 +121,7 @@
 
 std::string MHashPP::getAlgorithmName (hashid id)
 {
-	char *name = mhash_get_hash_name (id) ;
+	char *name = reinterpret_cast<char *>(mhash_get_hash_name (id)) ;
 	std::string retval ;
 	if (name == NULL) {
 		retval = std::string ("<algorithm not found>") ;
--- a/src/MHashPP.h	2003-09-28 19:30:30.000000000 +0400
+++ b/src/MHashPP.h	2014-08-13 20:46:21.000000000 +0400
@@ -21,6 +21,7 @@
 #ifndef SH_MHASHPP_H
 #define SH_MHASHPP_H
 
+#define _Bool bool
 #include <mhash.h>
 
 #include "common.h"
